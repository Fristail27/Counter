{"version":3,"sources":["Components/display/display.module.css","Components/displayWithInputs/DisplayWithInputs.module.css","Components/Common/button/button.module.css","Components/Common/Menu/menu.tsx","utils/InitialState.ts","Components/Pages/Error404.tsx","Components/Common/button/button.tsx","Components/Common/Input/CustomizedInput.tsx","Components/displayWithInputs/DisplayWithInputs.tsx","Components/display/display.tsx","Components/Pages/TwoDisplays/TwoDisplays.tsx","Components/Pages/OneDisplay/OneDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SimpleMenu","React","useState","anchorEl","setAnchorEl","handleClose","IconButton","aria-controls","aria-haspopup","onClick","event","currentTarget","edge","color","aria-label","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","component","NavLink","to","initialState","keyValue","defaultValue","fromLocStor","JSON","parse","localStorage","getItem","Number","parseInt","Error404","Button","props","actionOnClick","className","s","btn","disabled","disabledStatus","name","useStyles","makeStyles","theme","createStyles","margin","spacing","input","fontSize","label","fontWeight","createMuiTheme","palette","primary","main","CustomizedInputs","classes","ThemeProvider","TextField","error","errorStatus","type","textValue","value","onChange","e","valueToNumber","inputProps","InputLabelProps","DisplayWithInputs","AppLeft","display","maxValueError","onChangeForMaxValue","maxValue","startValueError","onChangeForStartValue","startValue","buttons","disabledStatusForSetBtn","actionOnClickForSetBtn","Display","addButtonStatus","valueCounter","resetButtonStatus","red","AppRight","OnClickForAddBtn","OnClickForResetBtn","TwoDisplays","Grid","style","height","container","direction","alignItems","justify","item","OneDisplay","displayStatus","setDisplayStatus","minHeight","forContainer","border","borderRadius","forInputs","background","marginTop","forDisplay","width","forButton","setDisableStatus","isNaN","root","xs","sm","ButtonGroup","variant","App","setValueCounter","setMaxValue","setStartValue","buttonSetDisableStatus","setButtonSetDisableStatus","setButtonDisableStatus","addOneValueCounter","resetValueCounter","onClickSetButton","locStora","String","setItem","stringify","onClickSetForOneDisplay","stat","i","displayValue","AppBar","position","Toolbar","Typography","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8efa408a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"display_red__14ULh\",\"AppRight\":\"display_AppRight__19bVW\",\"display\":\"display_display__1UyQ8\",\"buttons\":\"display_buttons__3GMkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppLeft\":\"DisplayWithInputs_AppLeft__3ZIpm\",\"display\":\"DisplayWithInputs_display__7_6jX\",\"buttons\":\"DisplayWithInputs_buttons__1aE6Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__3logc\"};","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {Menu as MenuIcon} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SimpleMenu = () => {\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const linkToTwoDisplays = () => {\r\n        setAnchorEl(null);\r\n\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <MenuIcon/>\r\n            </IconButton>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem component={NavLink} to=\"/TwoDisplays\" onClick={linkToTwoDisplays}>Two Displays</MenuItem>\r\n                <MenuItem component={NavLink} to=\"/OneDisplay\" onClick={handleClose}>One Display</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SimpleMenu","const initialState = (keyValue: string, defaultValue: number) => {\r\n    const fromLocStor = JSON.parse(localStorage.getItem(\"localStorageValues\") || \"{}\")\r\n    if (fromLocStor[keyValue]) {\r\n        return Number.parseInt(fromLocStor[keyValue])\r\n    } else {\r\n        return defaultValue\r\n    }\r\n}; //фяк принимает строку с названием ключа объекта и возвращает либо значение из локалСторедж, или если его нет то 0/\r\n\r\nexport default initialState","import React from \"react\";\r\n\r\nconst Error404: React.FC = () => {\r\n    return (\r\n        <div>Error404</div>\r\n    )\r\n}\r\n\r\nexport default Error404","import React from \"react\";\r\nimport s from \"./button.module.css\"\r\n\r\ntype ButtonType = {\r\n    actionOnClick: () => void,\r\n    disabledStatus: boolean,\r\n    name: string,\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.actionOnClick();\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={onClickHandler}\r\n            className={s.btn}\r\n            disabled={props.disabledStatus}>\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {ChangeEvent} from 'react';\r\nimport {\r\n    createStyles,\r\n    Theme,\r\n    ThemeProvider,\r\n    makeStyles,\r\n    createMuiTheme,\r\n} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        margin: {\r\n            margin: theme.spacing(1),\r\n        },\r\n        input: {\r\n            color:\"white\",\r\n            fontSize: 25,\r\n        },\r\n        label: {\r\n            fontSize: 25,\r\n            fontWeight: 700,\r\n        }\r\n    }),\r\n);\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default function CustomizedInputs(props:any) {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const valueToNumber = Number.parseInt(e.currentTarget.value);//приводим value инпута к числу, т.к. возвращает строку\r\n        props.onChange(valueToNumber)\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n            <ThemeProvider theme={theme}>\r\n                <TextField\r\n                    error={props.errorStatus}\r\n                    type=\"number\"\r\n                    className={classes.margin}\r\n                    label={props.textValue}\r\n                    value={props.value}\r\n                    onChange={onChangeHandler}\r\n                    inputProps={{\r\n                        className: classes.input\r\n                    }}\r\n                    InputLabelProps={{\r\n                        className: classes.label\r\n\r\n                    }}\r\n                />\r\n            </ThemeProvider>\r\n    );\r\n}","import React from \"react\";\r\nimport s from \"./DisplayWithInputs.module.css\"\r\nimport Button from \"../Common/button/button\";\r\nimport CustomizedInputs from \"../Common/Input/CustomizedInput\";\r\n\r\nexport type DisplayWithInputsType = {\r\n    maxValue:number\r\n    startValue:number\r\n    maxValueError:boolean\r\n    startValueError:boolean\r\n    disabledStatusForSetBtn: boolean\r\n    actionOnClickForSetBtn: (bool?:boolean) => void\r\n    onChangeForMaxValue: (i: number) => void\r\n    onChangeForStartValue: (i: number) => void\r\n}\r\n\r\nconst DisplayWithInputs = (props :DisplayWithInputsType) => {\r\n    return (\r\n        <div className={s.AppLeft}>\r\n            <div className={s.display}>\r\n                <CustomizedInputs errorStatus={props.maxValueError} onChange={props.onChangeForMaxValue} value={props.maxValue}\r\n                                  textValue=\"Max value:\"/>\r\n                <CustomizedInputs errorStatus={props.startValueError} onChange={props.onChangeForStartValue} value={props.startValue}\r\n                                  textValue=\"Start value:\"/>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button name=\"Set\" disabledStatus={props.disabledStatusForSetBtn} actionOnClick={props.actionOnClickForSetBtn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayWithInputs;","import React from \"react\";\r\nimport s from \"./display.module.css\"\r\nimport Button from \"../Common/button/button\";\r\n\r\nexport type DisplayType = {\r\n    maxValue: number\r\n    startValue: number\r\n    valueCounter: number\r\n    value: number | \"Введите значения и нажмите SET\" | \"Введите корректное значение\"\r\n    OnClickForAddBtn: () => void\r\n    OnClickForResetBtn: () => void\r\n}\r\n\r\nconst Display = (props :DisplayType) => {\r\n    const addButtonStatus = props.valueCounter >= props.maxValue; // дисейбл для кнопки адд\r\n    const resetButtonStatus = props.valueCounter <= props.startValue; // дисейбл для кн ресет\r\n\r\n    let red = \"\";\r\n    if (props.value === props.maxValue) {\r\n        red = s.red\r\n    }\r\n    return (\r\n        <div className={s.AppRight}>\r\n            <div className={s.display}>\r\n                <div className={red}>\r\n                    <div>{props.value}</div>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button name=\"Add\" disabledStatus={addButtonStatus} actionOnClick={props.OnClickForAddBtn}/>\r\n                <Button name=\"Reset\" disabledStatus={resetButtonStatus} actionOnClick={props.OnClickForResetBtn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;\r\n\r\n","import {Grid} from \"@material-ui/core\";\r\nimport DisplayWithInputs, {DisplayWithInputsType} from \"../../displayWithInputs/DisplayWithInputs\";\r\nimport Display, {DisplayType} from \"../../display/display\";\r\nimport React from \"react\";\r\n\r\n\r\ntype TwoDisplaysType = DisplayType & DisplayWithInputsType\r\n\r\nconst TwoDisplays = (props: TwoDisplaysType) => {\r\n    return (\r\n        <Grid style={{height: \"90vh\"}} container={true} direction=\"row\" alignItems=\"center\" justify=\"space-evenly\">\r\n            <Grid item>\r\n                <DisplayWithInputs\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    maxValueError={props.maxValueError}\r\n                    startValueError={props.startValueError}\r\n                    disabledStatusForSetBtn={props.disabledStatusForSetBtn}\r\n                    actionOnClickForSetBtn={props.actionOnClickForSetBtn}\r\n                    onChangeForMaxValue={props.onChangeForMaxValue}\r\n                    onChangeForStartValue={props.onChangeForStartValue}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <Display maxValue={props.maxValue}\r\n                         startValue={props.startValue}\r\n                         valueCounter={props.valueCounter}\r\n                         value={props.value}\r\n                         OnClickForAddBtn={props.OnClickForAddBtn}\r\n                         OnClickForResetBtn={props.OnClickForResetBtn}/>\r\n            </Grid>\r\n        </Grid>)\r\n}\r\n\r\nexport default TwoDisplays","import React, {useState} from \"react\";\r\nimport {Button, ButtonGroup, Grid} from \"@material-ui/core\";\r\nimport CustomizedInputs from \"../../Common/Input/CustomizedInput\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {DisplayType} from \"../../display/display\";\r\nimport {DisplayWithInputsType} from \"../../displayWithInputs/DisplayWithInputs\";\r\n\r\ntype OneDisplaysType = DisplayType & DisplayWithInputsType\r\n\r\n\r\nconst OneDisplay = (props: OneDisplaysType) => {\r\n    const [displayStatus, setDisplayStatus] = useState<boolean>(true)\r\n    const useStyles = makeStyles({\r\n        main: {\r\n            minHeight: \"90vh\",\r\n        },\r\n        forContainer: {\r\n            border: \"3px #0592cd solid\",\r\n            borderRadius: 20,\r\n        },\r\n        forInputs: {\r\n            background: 'linear-gradient(90deg, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)',\r\n            borderRadius: 20,\r\n            border: '3px #0592cd solid',\r\n            color: 'white',\r\n            marginTop: 20,\r\n        },\r\n        forDisplay: {\r\n            fontSize: 40,\r\n            border: '3px #0592cd solid',\r\n            borderRadius: 20,\r\n            width: \"42.5%\",\r\n            height: \"155px\",\r\n            marginTop: 20,\r\n            background: 'linear-gradient(90deg, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)',\r\n            color: (props.valueCounter === props.maxValue) ? \"#770000\" : \"black\"\r\n        },\r\n        forButton: {\r\n            margin: 20,\r\n        },\r\n    });\r\n    const onClickSet = () => {\r\n        props.actionOnClickForSetBtn(displayStatus)\r\n        setDisplayStatus(!displayStatus)\r\n    };\r\n    const setDisableStatus = props.disabledStatusForSetBtn || props.maxValue===props.startValue || Number.isNaN(props.startValue) || Number.isNaN(props.maxValue)\r\n    const addButtonStatus = props.valueCounter >= props.maxValue || displayStatus; // дисейбл для кнопки адд\r\n    const resetButtonStatus = props.valueCounter <= props.startValue || displayStatus; // дисейбл для кн ресет\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid classes={{root: classes.main,}} container>\r\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                <Grid classes={{root: classes.forContainer,}} item xs={12} sm={5}>\r\n                    <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n                        { displayStatus\r\n                            ? <Grid classes={{root: classes.forInputs,}} item xs={11} sm={8}>\r\n                             <div><Grid item><CustomizedInputs errorStatus={props.maxValueError}\r\n                                                                    onChange={props.onChangeForMaxValue}\r\n                                                                    value={props.maxValue}\r\n                                                                    textValue=\"Max value:\"/></Grid>\r\n                                    <Grid item><CustomizedInputs errorStatus={props.startValueError}\r\n                                                                 onChange={props.onChangeForStartValue}\r\n                                                                 value={props.startValue}\r\n                                                                 textValue=\"Start value:\"/> </Grid></div>\r\n                                </Grid>\r\n                            : <Grid classes={{root: classes.forDisplay,}} container direction=\"column\" justify=\"center\" alignItems=\"center\" >\r\n                                {props.valueCounter}\r\n                        </Grid>}\r\n                        <Grid item classes={{root: classes.forButton,}}>\r\n                            <ButtonGroup variant=\"contained\" color=\"primary\"\r\n                                         aria-label=\"contained primary button group\">\r\n                                <Button disabled={setDisableStatus}\r\n                                        onClick={onClickSet}>Set</Button>\r\n                                <Button disabled={addButtonStatus} onClick={props.OnClickForAddBtn}>Add</Button>\r\n                                <Button disabled={resetButtonStatus} onClick={props.OnClickForResetBtn}>Reset</Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default OneDisplay","import React, {useState} from 'react';\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {AppBar, Grid, Toolbar, Typography} from \"@material-ui/core\";\r\nimport SimpleMenu from \"./Components/Common/Menu/menu\";\r\nimport './App.css';\r\nimport initialState from \"./utils/InitialState\";\r\nimport Error404 from \"./Components/Pages/Error404\";\r\nimport TwoDisplays from \"./Components/Pages/TwoDisplays/TwoDisplays\";\r\nimport OneDisplay from \"./Components/Pages/OneDisplay/OneDisplay\";\r\n\r\n\r\nfunction App() {\r\n    let [valueCounter, setValueCounter] = useState<number>(0); //usestate для значения счетчика\r\n    let [maxValue, setMaxValue] = useState<number>(initialState(\"maxValue\", 0))  // usestate для максимального значения\r\n    let [startValue, setStartValue] = useState<number>(initialState(\"startValue\", 0))  // usestate для стартового значения\r\n    let [buttonSetDisableStatus, setButtonSetDisableStatus] = useState<boolean>(false) // // usestate для отображения кнопки сет\r\n    const maxValueError = (maxValue <= startValue) || (maxValue < 0) // условие для ошибки для поля с макс значением\r\n    const startValueError = (maxValue <= startValue) || (startValue < 0) // условие для ошибки для поля со стартовым значением\r\n    const setButtonDisableStatus = (maxValue < startValue) || (maxValue < 0) || (startValue < 0)// условия при которых кнопка сет должна гаснуть, если какое то сработает то возвращают false, вставляется в пропсы кнопки сет и перерисовывает при каждом изменении инпутов\r\n    const addOneValueCounter = () => {\r\n        if (valueCounter < maxValue) {\r\n            setValueCounter(valueCounter + 1);\r\n        }\r\n    }; // обработчик кнопки адд\r\n    const resetValueCounter = () => {\r\n        setValueCounter(startValue)\r\n    }; // обработчик ресета\r\n    const onClickSetButton = () => {\r\n        setValueCounter(startValue); // устанавливаем значение в дисплей\r\n        setButtonSetDisableStatus(true) // делаем кнопку после нажатия неактивной, потом активность возвращаем при изменении инпутов\r\n        const locStora = {\r\n            maxValue: String(maxValue),\r\n            startValue: String(startValue),\r\n        } // объект со старт. макс. и текущим значением\r\n\r\n        localStorage.setItem(\"localStorageValues\", JSON.stringify(locStora))\r\n    }; // обработчик нажатия на set\r\n    const onClickSetForOneDisplay = (stat?:boolean) => {\r\n        if(stat) {\r\n            setValueCounter(startValue);\r\n            const locStora = {\r\n                maxValue: String(maxValue),\r\n                startValue: String(startValue),\r\n            } // объект со старт. макс. и текущим значением\r\n            localStorage.setItem(\"localStorageValues\", JSON.stringify(locStora))\r\n        } else {\r\n\r\n        }\r\n    }\r\n    const onChangeForMaxValue = (i: number) => {\r\n        setMaxValue(i)\r\n        setButtonSetDisableStatus(false) // возвращаем активность кнопки сет\r\n    }; //обработчик изменения макс инпута\r\n    const onChangeForStartValue = (i: number) => {\r\n        setStartValue(i)\r\n        setButtonSetDisableStatus(false) // возвращаем активность кнопки сет\r\n    }; // обработчик изменения старт инпута\r\n    const displayValue = (valueCounter: number) => {\r\n        if (!buttonSetDisableStatus) {\r\n            return \"Введите значения и нажмите SET\"\r\n        }\r\n        if (isNaN(valueCounter)) {\r\n            return \"Введите корректное значение\"\r\n        }\r\n        if (maxValueError || startValueError) {\r\n            return \"Введите корректное значение\"\r\n        }\r\n        return valueCounter\r\n    } // фция возвращает или значение счетчика или текст ошибки\r\n    // в пропс кнопки сета передаю отдельно два условия для дизейбла: setButtonDisableStatus реагирует на изменения инпутов и блокирует кнопку при запрещенных условиях, разблокирует если запрещенные условия выполняются, а buttonSetDisableStatus берется из юсстейта и блокирует кнопку при первом нажатии, а разблокирует при изменении инпутов\r\n    // надо их как то объединитьs\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <SimpleMenu/>\r\n                        <Typography variant=\"h6\">\r\n                            Counter\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Switch>\r\n                    <Route path={\"/\"} exact render={() => <Redirect to={\"/TwoDisplays\"}/>}/>\r\n                    <Route path={\"/TwoDisplays\"} render={() => <TwoDisplays\r\n                        startValue={startValue}\r\n                        maxValue={maxValue}\r\n                        maxValueError={maxValueError}\r\n                        startValueError={startValueError}\r\n                        disabledStatusForSetBtn={setButtonDisableStatus || buttonSetDisableStatus}\r\n                        actionOnClickForSetBtn={onClickSetButton}\r\n                        onChangeForMaxValue={onChangeForMaxValue}\r\n                        onChangeForStartValue={onChangeForStartValue}\r\n                        valueCounter={valueCounter}\r\n                        value={displayValue(valueCounter)}\r\n                        OnClickForAddBtn={addOneValueCounter}\r\n                        OnClickForResetBtn={resetValueCounter}/>}/>\r\n                    <Route path={\"/OneDisplay\"} render={() => <OneDisplay\r\n                        startValue={startValue}\r\n                        maxValue={maxValue}\r\n                        maxValueError={maxValueError}\r\n                        startValueError={startValueError}\r\n                        disabledStatusForSetBtn={setButtonDisableStatus}\r\n                        actionOnClickForSetBtn={onClickSetForOneDisplay}\r\n                        onChangeForMaxValue={onChangeForMaxValue}\r\n                        onChangeForStartValue={onChangeForStartValue}\r\n                        valueCounter={valueCounter}\r\n                        value={displayValue(valueCounter)}\r\n                        OnClickForAddBtn={addOneValueCounter}\r\n                        OnClickForResetBtn={resetValueCounter}/>}/>\r\n                    <Route render={() => <Error404/>}/>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}