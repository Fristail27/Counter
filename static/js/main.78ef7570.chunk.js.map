{"version":3,"sources":["Components/display/display.module.css","Components/Input/Input.module.css","Components/displayWithInputs/DisplayWithInputs.module.css","Components/button/button.module.css","Components/button/button.tsx","Components/display/display.tsx","Components/Input/Input.tsx","Components/displayWithInputs/DisplayWithInputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","onClick","actionOnClick","className","s","btn","disabled","disabledStatus","name","Display","red","value","maxValue","AppRight","display","buttons","nameForAddBtn","disabledStatusForAddBtn","actionOnClickForAddBtn","nameForResetBtn","disabledStatusResetBtn","actionOnClickForResetBtn","Input","errorStatus","inputError","displayElement","displayText","textValue","onChange","e","valueToNumber","Number","parseInt","currentTarget","input","type","DisplayWithInputs","AppLeft","errorStatusForMaxValue","onChangeForMaxValue","valueForMaxValue","textValueForMaxValue","errorStatusForStartValue","onChangeForStartValue","valueForStartValue","textValueForStartValue","nameForSetBtn","disabledStatusForSetBtn","actionOnClickForSetBtn","App","initialState","keyValue","fromLocStor","JSON","parse","localStorage","getItem","useState","valueCounter","setValueCounter","setMaxValue","startValue","setStartValue","buttonSetDisableStatus","setButtonSetDisableStatus","addButtonStatus","resetButtonStatus","maxValueError","startValueError","setButtonDisableStatus","locStora","String","setItem","stringify","i","isNaN","displayValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78ef7570.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"display_red__14ULh\",\"AppRight\":\"display_AppRight__19bVW\",\"display\":\"display_display__1UyQ8\",\"buttons\":\"display_buttons__3GMkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayElement\":\"Input_displayElement__2_MLQ\",\"displayText\":\"Input_displayText__2fQ1z\",\"input\":\"Input_input__3xBnV\",\"inputError\":\"Input_inputError__Vk4_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppLeft\":\"DisplayWithInputs_AppLeft__3ZIpm\",\"display\":\"DisplayWithInputs_display__7_6jX\",\"buttons\":\"DisplayWithInputs_buttons__1aE6Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__2n4tp\"};","import React from \"react\";\r\nimport s from \"./button.module.css\"\r\n\r\ntype ButtonType = {\r\n    actionOnClick: () => void,\r\n    disabledStatus: boolean,\r\n    name: string,\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.actionOnClick();\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={onClickHandler}\r\n            className={s.btn}\r\n            disabled={props.disabledStatus}>\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport s from \"./display.module.css\"\r\nimport Button from \"../button/button\";\r\n\r\ntype DisplayType = {\r\n    maxValue: number\r\n    value: number | \"Введите значения и нажмите SET\" | \"Введите корректное значение\"\r\n    nameForResetBtn: string\r\n    nameForAddBtn: string\r\n    disabledStatusForAddBtn: boolean\r\n    disabledStatusResetBtn: boolean\r\n    actionOnClickForAddBtn: () => void\r\n    actionOnClickForResetBtn: () => void\r\n}\r\n\r\nconst Display = (props :DisplayType) => {\r\n    let red = \"\";\r\n    if (props.value === props.maxValue) {\r\n        red = s.red\r\n    }\r\n    return (\r\n        <div className={s.AppRight}>\r\n            <div className={s.display}>\r\n                <div className={red}>\r\n                    <div>{props.value}</div>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button name={props.nameForAddBtn} disabledStatus={props.disabledStatusForAddBtn} actionOnClick={props.actionOnClickForAddBtn}/>\r\n                <Button name={props.nameForResetBtn} disabledStatus={props.disabledStatusResetBtn} actionOnClick={props.actionOnClickForResetBtn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Input.module.css\"\r\n\r\nconst Input = (props:any) => {\r\n    let errorStatus = props.errorStatus ? s.inputError : \"\"\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const valueToNumber = Number.parseInt(e.currentTarget.value);//приводим value инпута к числу, т.к. возвращает строку\r\n        props.onChange(valueToNumber)\r\n    }\r\n\r\n    return (\r\n        <div className={s.displayElement}>\r\n            <span className={s.displayText}>{props.textValue}</span>\r\n            <input value={props.value} onChange={onChangeHandler} className={s.input + \" \" + errorStatus} type=\"number\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input","import React from \"react\";\r\nimport s from \"./DisplayWithInputs.module.css\"\r\nimport Button from \"../button/button\";\r\nimport Input from \"../Input/Input\";\r\n\r\ntype DisplayWithInputsType = {\r\n    nameForSetBtn: string\r\n    disabledStatusForSetBtn: boolean\r\n    actionOnClickForSetBtn: () => void\r\n    errorStatusForMaxValue: boolean\r\n    onChangeForMaxValue: (i: number) => void\r\n    valueForMaxValue: number\r\n    textValueForMaxValue: string\r\n    errorStatusForStartValue: boolean\r\n    onChangeForStartValue: (i: number) => void\r\n    valueForStartValue: number\r\n    textValueForStartValue: string\r\n}\r\n\r\nconst DisplayWithInputs = (props :DisplayWithInputsType) => {\r\n    return (\r\n        <div className={s.AppLeft}>\r\n            <div className={s.display}>\r\n                <Input errorStatus={props.errorStatusForMaxValue} onChange={props.onChangeForMaxValue} value={props.valueForMaxValue}\r\n                       textValue={props.textValueForMaxValue}/>\r\n                <Input errorStatus={props.errorStatusForStartValue} onChange={props.onChangeForStartValue} value={props.valueForStartValue}\r\n                       textValue={props.textValueForStartValue}/>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button name={props.nameForSetBtn} disabledStatus={props.disabledStatusForSetBtn} actionOnClick={props.actionOnClickForSetBtn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayWithInputs;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Display from \"./Components/display/display\";\r\nimport DisplayWithInputs from \"./Components/displayWithInputs/DisplayWithInputs\";\r\n\r\nfunction App() {\r\n    const initialState = (keyValue: string) => {\r\n        const fromLocStor = JSON.parse(localStorage.getItem(\"localStorageValues\") as string)\r\n        if (fromLocStor[`${keyValue}`]) {\r\n            return Number.parseInt(fromLocStor[keyValue])\r\n        } else {\r\n            return 0\r\n        }\r\n    }; //фяк принимает строку с названием ключа объекта и возвращает либо значение из локалСторедж, или если его нет то 0\r\n    let [valueCounter, setValueCounter] = useState<number>(0); //usestate для значения счетчика\r\n    let [maxValue, setMaxValue] = useState<number>(initialState(\"maxValue\"))  // usestate для максимального значения\r\n    let [startValue, setStartValue] = useState<number>(initialState(\"startValue\"))  // usestate для стартового значения\r\n    let [buttonSetDisableStatus, setButtonSetDisableStatus] = useState<boolean>(false) // // usestate для отображения кнопки сет\r\n    const addButtonStatus = valueCounter >= maxValue; // дисейбл для кнопки адд\r\n    const resetButtonStatus = valueCounter <= startValue; // дисейбл для кн ресет\r\n    const maxValueError = (maxValue <= startValue) || (maxValue < 0) // условие для ошибки для поля с макс значением\r\n    const startValueError = (maxValue <= startValue) || (startValue < 0) // условие для ошибки для поля со стартовым значением\r\n    const setButtonDisableStatus = (maxValue < startValue) || (maxValue < 0) || (startValue < 0) // условия при которых кнопка сет должна гаснуть, если какое то сработает то возвращают false, вставляется в пропсы кнопки сет и перерисовывает при каждом изменении инпутов\r\n    const addOneValueCounter = () => {\r\n        if (valueCounter < maxValue) {\r\n            setValueCounter(valueCounter + 1);\r\n        }\r\n    }; // обработчик кнопки адд\r\n    const resetValueCounter = () => {\r\n        setValueCounter(startValue)\r\n    }; // обработчик ресета\r\n    const onClickSetButton = () => {\r\n        setValueCounter(startValue); // устанавливаем значение в дисплей\r\n        setButtonSetDisableStatus(true) // делаем кнопку после нажатия неактивной, потом активность возвращаем при изменении инпутов\r\n        const locStora = {\r\n            maxValue: String(maxValue),\r\n            startValue: String(startValue),\r\n        } // объект со старт. макс. и текущим значением\r\n\r\n        localStorage.setItem(\"localStorageValues\", JSON.stringify(locStora))\r\n    }; // обработчик нажатия на set\r\n    const onChangeForMaxValue = (i: number) => {\r\n        setMaxValue(i)\r\n        setButtonSetDisableStatus(false) // возвращаем активность кнопки сет\r\n    }; //обработчик изменения макс инпута\r\n    const onChangeForStartValue = (i: number) => {\r\n        setStartValue(i)\r\n        setButtonSetDisableStatus(false) // возвращаем активность кнопки сет\r\n    }; // обработчик изменения старт инпута\r\n    const displayValue = (valueCounter: number) => {\r\n        if (!buttonSetDisableStatus) {\r\n            return \"Введите значения и нажмите SET\"\r\n        }\r\n        if(isNaN(valueCounter)) {\r\n            return \"Введите корректное значение\"\r\n        }\r\n        return valueCounter\r\n    } // фция возвращает или значение счетчика или текст ошибки\r\n    // в пропс кнопки сета передаю отдельно два условия для дизейбла: setButtonDisableStatus реагирует на изменения инпутов и блокирует кнопку при запрещенных условиях, разблокирует если запрещенные условия выполняются, а buttonSetDisableStatus берется из юсстейта и блокирует кнопку при первом нажатии, а разблокирует при изменении инпутов\r\n    // надо их как то объединить но пока не знаю как, знаю что говнокод но пока работает\r\n    return (\r\n        <div className=\"App\">\r\n            <DisplayWithInputs nameForSetBtn=\"Set\"\r\n                               disabledStatusForSetBtn={setButtonDisableStatus || buttonSetDisableStatus}\r\n                               actionOnClickForSetBtn={onClickSetButton} errorStatusForMaxValue={maxValueError}\r\n                               onChangeForMaxValue={onChangeForMaxValue} valueForMaxValue={maxValue}\r\n                               textValueForMaxValue=\"Max value:\" errorStatusForStartValue={startValueError}\r\n                               onChangeForStartValue={onChangeForStartValue} valueForStartValue={startValue}\r\n                               textValueForStartValue=\"Start value:\"/>\r\n            <Display maxValue={maxValue} value={displayValue(valueCounter)} nameForAddBtn=\"Add\"\r\n                     disabledStatusForAddBtn={addButtonStatus} actionOnClickForAddBtn={addOneValueCounter}\r\n                     nameForResetBtn=\"Reset\" disabledStatusResetBtn={resetButtonStatus}\r\n                     actionOnClickForResetBtn={resetValueCounter}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}