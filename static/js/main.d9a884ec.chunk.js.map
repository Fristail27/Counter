{"version":3,"sources":["Components/Input/Input.module.css","Components/button/button.module.css","Components/display/display.module.css","Components/button/button.tsx","Components/display/display.tsx","Components/Input/Input.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","onClick","actionOnClick","className","s","btn","disabled","disabledStatus","name","Display","red","value","maxValue","Input","errorStatus","inputError","displayElement","displayText","textValue","onChange","e","valueToNumber","Number","parseInt","currentTarget","input","type","App","useState","valueCounter","setValueCounter","setMaxValue","startValue","setStartValue","buttonSetDisableStatus","setButtonSetDisableStatus","addButtonStatus","resetButtonStatus","maxValueError","startValueError","setButtonDisableStatus","i","displayValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9a884ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayElement\":\"Input_displayElement__2_MLQ\",\"displayText\":\"Input_displayText__2fQ1z\",\"input\":\"Input_input__3xBnV\",\"inputError\":\"Input_inputError__Vk4_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__2n4tp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"display_red__14ULh\"};","import React from \"react\";\r\nimport s from \"./button.module.css\"\r\n\r\ntype ButtonType = {\r\n    actionOnClick: () => void,\r\n    disabledStatus: boolean,\r\n    name: string,\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.actionOnClick();\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={onClickHandler}\r\n            className={s.btn}\r\n            disabled={props.disabledStatus}>\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport s from \"./display.module.css\"\r\n\r\ntype DisplayType = {\r\n    value: number| string,\r\n    maxValue: number,\r\n}\r\n\r\nconst Display = (props :DisplayType) => {\r\n    let red = \"\";\r\n    if (props.value === props.maxValue) {\r\n        red = s.red\r\n    }\r\n    return (\r\n       <div className={red}>\r\n           <div>{props.value}</div>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Input.module.css\"\r\n\r\nconst Input = (props:any) => {\r\n    let errorStatus = props.errorStatus ? s.inputError : \"\"\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const valueToNumber = Number.parseInt(e.currentTarget.value);//приводим value инпута к числу, т.к. возвращает строку\r\n        props.onChange(valueToNumber)\r\n    }\r\n\r\n    return (\r\n        <div className={s.displayElement}>\r\n            <span className={s.displayText}>{props.textValue}</span>\r\n            <input value={props.value} onChange={onChangeHandler} className={s.input + \" \" + errorStatus} type=\"number\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input","import React, {useState} from 'react';\nimport './App.css';\nimport Button from \"./Components/button/button\";\nimport Display from \"./Components/display/display\";\nimport Input from \"./Components/Input/Input\";\nimport s from \"./Components/Input/Input.module.css\";\n\n\n// добавить сохранение в локалсторадж\n\nfunction App() {\n    let [valueCounter, setValueCounter] = useState<number>(0); //usestate для значения счетчика\n    let [maxValue, setMaxValue] = useState<number>(0)  // usestate для максимального значения\n    let [startValue, setStartValue] = useState<number>(0)  // usestate для стартового значения\n    let [buttonSetDisableStatus, setButtonSetDisableStatus] = useState<boolean>(false) // // usestate для отображения кнопки сет\n    const addButtonStatus = valueCounter >= maxValue; // дисейбл для кнопки адд\n    const resetButtonStatus = valueCounter <= startValue; // дисейбл для кн ресет\n    const maxValueError = (maxValue < startValue) || (maxValue < 0) // условие для ошибки для поля с макс значением\n    const startValueError = (maxValue < startValue) || (startValue < 0) // условие для ошибки для поля со стартовым значением\n    const setButtonDisableStatus = (maxValue < startValue) || (maxValue < 0) || (startValue < 0) // условия при которых кнопка сет должна гаснуть, если какое то сработает то возвращают false, вставляется в пропсы кнопки сет и перерисовывает при каждом изменении инпутов\n    const addOneValueCounter = () => {\n        if (valueCounter < maxValue) {\n            setValueCounter(valueCounter + 1);\n        }\n    }; // обработчик кнопки адд\n    const resetValueCounter = () => {\n        setValueCounter(startValue)\n    }; // обработчик ресета\n    const onClickSetButton = () => {\n        setValueCounter(startValue); // устанавливаем значение в дисплей\n        setButtonSetDisableStatus(true) // делаем кнопку после нажатия неактивной, потом активность возвращаем при изменении инпутов\n    }; // обработчик нажатия на set\n    const onChangeForMaxValue = (i: number) => {\n        setMaxValue(i)\n        setButtonSetDisableStatus(false) // возвращаем активность кнопки сет\n    }; //обработчик изменения макс инпута\n    const onChangeForStartValue = (i: number) => {\n        setStartValue(i)\n        setButtonSetDisableStatus(false) // возвращаем активность кнопки сет\n    }; // обработчик изменения старт инпута\n    const displayValue = (valueCounter: number) => {\n        if (maxValueError) {\n            return \"Введите корректные значения\"\n        }\n        return valueCounter\n    } // фция возвращает или значение счетчика или текст ошибки\n    // в пропс кнопки сета передаю отдельно два условия для дизейбла: setButtonDisableStatus реагирует на изменения инпутов и блокирует кнопку при запрещенных условиях, разблокирует если запрещенные условия выполняются, а buttonSetDisableStatus берется из юсстейта и блокирует кнопку при первом нажатии, а разблокирует при изменении инпутов\n    // надо их как то объединить но пока не знаю как, знаю что говнокод но пока работает\n    return (\n        <div className=\"App\">\n            <div className=\"App-left\">\n                <div className=\"display\">\n                    <Input errorStatus={maxValueError} onChange={onChangeForMaxValue} value={maxValue}\n                           textValue=\"Max value:\"/>\n                    <Input errorStatus={startValueError} onChange={onChangeForStartValue} value={startValue}\n                           textValue=\"Start value:\"/>\n                </div>\n                <div className=\"buttons\">\n                    <Button name=\"Set\" disabledStatus={setButtonDisableStatus || buttonSetDisableStatus} actionOnClick={onClickSetButton}/>\n                </div>\n            </div>\n            <div className=\"App-right\">\n                <div className=\"display\">\n                    <Display maxValue={maxValue} value={displayValue(valueCounter)}/>\n                </div>\n                <div className=\"buttons\">\n                    <Button name=\"Add\" disabledStatus={addButtonStatus} actionOnClick={addOneValueCounter}/>\n                    <Button name=\"Reset\" disabledStatus={resetButtonStatus} actionOnClick={resetValueCounter}/>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}