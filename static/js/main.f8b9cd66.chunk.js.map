{"version":3,"sources":["Components/display/display.module.css","Components/displayWithInputs/DisplayWithInputs.module.css","Components/Common/button/button.module.css","Components/Common/Menu/menu.tsx","Components/Pages/Error404.tsx","Components/Common/button/button.tsx","Components/Common/Input/CustomizedInput.tsx","Components/displayWithInputs/DisplayWithInputs.tsx","state/Counter-reducer.ts","Components/display/display.tsx","Components/Pages/TwoDisplays/TwoDisplays.tsx","Components/Pages/OneDisplay/OneDisplay.tsx","utils/InitialStateforValue.ts","App.tsx","reportWebVitals.ts","state/Store.ts","index.tsx"],"names":["module","exports","SimpleMenu","React","useState","anchorEl","setAnchorEl","handleClose","IconButton","aria-controls","aria-haspopup","onClick","event","currentTarget","edge","color","aria-label","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","component","NavLink","to","Error404","Button","props","actionOnClick","className","s","btn","disabled","disabledStatus","name","useStyles","makeStyles","theme","createStyles","margin","spacing","input","fontSize","label","fontWeight","createMuiTheme","palette","primary","main","CustomizedInputs","classes","ThemeProvider","TextField","error","errorStatus","type","textValue","value","onChange","e","valueToNumber","Number","parseInt","inputProps","InputLabelProps","ACTIONS_TYPE","DisplayWithInputs","AppLeft","display","maxValueError","onChangeForMaxValue","maxValue","startValueError","onChangeForStartValue","startValue","buttons","disabledStatusForSetBtn","actionOnClickForSetBtn","Display","addButtonStatus","valueCounter","resetButtonStatus","red","AppRight","OnClickForAddBtn","OnClickForResetBtn","TwoDisplays","Grid","style","height","container","direction","alignItems","justify","item","OneDisplay","setDisableStatus","isNaN","displayStatus","minHeight","forContainer","border","borderRadius","forInputs","background","marginTop","forDisplay","width","forButton","root","xs","sm","ButtonGroup","variant","onClickSet","initialStateforValue","keyValue","defaultValue","fromLocStor","JSON","parse","localStorage","getItem","initialState","currentValue","setButtonDisableStatus","displayStatusForOneDisplay","App","values","useSelector","state","dispatch","useDispatch","addOneValueCounter","INCREASE_BY_ONE","resetValueCounter","RESET_CURRENT_VALUE","i","CHANGE_MAX_VALUE","CHANGE_START_VALUE","onClickSetButtonHandler","CLICK_SET_BUTTON","displayValue","AppBar","position","Toolbar","Typography","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","objForLocalStorage","String","setItem","stringify","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f8b9cd66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"display_red__14ULh\",\"AppRight\":\"display_AppRight__19bVW\",\"display\":\"display_display__1UyQ8\",\"buttons\":\"display_buttons__3GMkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppLeft\":\"DisplayWithInputs_AppLeft__3ZIpm\",\"display\":\"DisplayWithInputs_display__7_6jX\",\"buttons\":\"DisplayWithInputs_buttons__1aE6Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__3logc\"};","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {Menu as MenuIcon} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SimpleMenu = () => {\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const linkToTwoDisplays = () => {\r\n        setAnchorEl(null);\r\n\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                <MenuIcon/>\r\n            </IconButton>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem component={NavLink} to=\"/TwoDisplays\" onClick={linkToTwoDisplays}>Two Displays</MenuItem>\r\n                <MenuItem component={NavLink} to=\"/OneDisplay\" onClick={handleClose}>One Display</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SimpleMenu","import React from \"react\";\r\n\r\nconst Error404: React.FC = () => {\r\n    return (\r\n        <div>Error404</div>\r\n    )\r\n}\r\n\r\nexport default Error404","import React from \"react\";\r\nimport s from \"./button.module.css\"\r\n\r\ntype ButtonType = {\r\n    actionOnClick: () => void,\r\n    disabledStatus: boolean,\r\n    name: string,\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.actionOnClick();\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={onClickHandler}\r\n            className={s.btn}\r\n            disabled={props.disabledStatus}>\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {ChangeEvent} from 'react';\r\nimport {\r\n    createStyles,\r\n    Theme,\r\n    ThemeProvider,\r\n    makeStyles,\r\n    createMuiTheme,\r\n} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        margin: {\r\n            margin: theme.spacing(1),\r\n        },\r\n        input: {\r\n            color:\"white\",\r\n            fontSize: 25,\r\n        },\r\n        label: {\r\n            fontSize: 25,\r\n            fontWeight: 700,\r\n        }\r\n    }),\r\n);\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default function CustomizedInputs(props:any) {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const valueToNumber = Number.parseInt(e.currentTarget.value) || 0;//приводим value инпута к числу, т.к. возвращает строку\r\n        props.onChange(valueToNumber)\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n            <ThemeProvider theme={theme}>\r\n                <TextField\r\n                    error={props.errorStatus}\r\n                    type=\"number\"\r\n                    className={classes.margin}\r\n                    label={props.textValue}\r\n                    value={props.value}\r\n                    onChange={onChangeHandler}\r\n                    inputProps={{\r\n                        className: classes.input\r\n                    }}\r\n                    InputLabelProps={{\r\n                        className: classes.label\r\n\r\n                    }}\r\n                />\r\n            </ThemeProvider>\r\n    );\r\n}","import React from \"react\";\r\nimport s from \"./DisplayWithInputs.module.css\"\r\nimport Button from \"../Common/button/button\";\r\nimport CustomizedInputs from \"../Common/Input/CustomizedInput\";\r\n\r\nexport type DisplayWithInputsType = {\r\n    maxValue:number\r\n    startValue:number\r\n    maxValueError:boolean\r\n    startValueError:boolean\r\n    disabledStatusForSetBtn: boolean\r\n    actionOnClickForSetBtn: (bool?:boolean) => void\r\n    onChangeForMaxValue: (i: number) => void\r\n    onChangeForStartValue: (i: number) => void\r\n}\r\n\r\nconst DisplayWithInputs = (props :DisplayWithInputsType) => {\r\n    return (\r\n        <div className={s.AppLeft}>\r\n            <div className={s.display}>\r\n                <CustomizedInputs errorStatus={props.maxValueError} onChange={props.onChangeForMaxValue} value={props.maxValue}\r\n                                  textValue=\"Max value:\"/>\r\n                <CustomizedInputs errorStatus={props.startValueError} onChange={props.onChangeForStartValue} value={props.startValue}\r\n                                  textValue=\"Start value:\"/>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button name=\"Set\" disabledStatus={props.disabledStatusForSetBtn} actionOnClick={props.actionOnClickForSetBtn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayWithInputs;","import initialStateforValue from \"../utils/InitialStateforValue\";\r\n\r\nexport enum ACTIONS_TYPE {\r\n    INCREASE_BY_ONE = \"INCREASE_BY_ONE\",\r\n    RESET_CURRENT_VALUE = \"RESET_CURRENT_VALUE\",\r\n    CHANGE_MAX_VALUE = \"CHANGE_MAX_VALUE\",\r\n    CHANGE_START_VALUE = \"CHANGE_START_VALUE\",\r\n    CLICK_SET_BUTTON = \"CLICK_SET_BUTTON\",\r\n}\r\n\r\nexport type InitialStateType ={\r\n    currentValue: number\r\n    maxValue: number\r\n    startValue: number\r\n    setButtonDisableStatus: boolean\r\n    displayStatusForOneDisplay: boolean\r\n}\r\n\r\ntype IncreaseByOneActionType = {\r\n    type: ACTIONS_TYPE.INCREASE_BY_ONE\r\n}\r\ntype ResetCurrentValueActionType = {\r\n    type: ACTIONS_TYPE.RESET_CURRENT_VALUE\r\n}\r\ntype changeMaxValueActionType = {\r\n    type: ACTIONS_TYPE.CHANGE_MAX_VALUE,\r\n    maxValue: number\r\n}\r\ntype changeStartValueActionType = {\r\n    type: ACTIONS_TYPE.CHANGE_START_VALUE,\r\n    startValue: number\r\n}\r\ntype ClickSetButtonActionType = {\r\n    type: ACTIONS_TYPE.CLICK_SET_BUTTON,\r\n}\r\n\r\n\r\nconst initialState :InitialStateType = {\r\n    currentValue: 0,\r\n    maxValue: initialStateforValue(\"maxValue\", 0),\r\n    startValue: initialStateforValue(\"startValue\", 0),\r\n    setButtonDisableStatus: false,\r\n    displayStatusForOneDisplay:true\r\n}\r\n\r\n\r\nexport const counterReducer = (state:InitialStateType = initialState, action:any) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.INCREASE_BY_ONE:\r\n            if (state.currentValue < state.maxValue) {\r\n                return {...state, currentValue: state.currentValue + 1}\r\n            } else {\r\n            return state}\r\n        case ACTIONS_TYPE.RESET_CURRENT_VALUE:\r\n            return {...state, currentValue: state.startValue}\r\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE:\r\n            return {...state, maxValue: action.maxValue, setButtonDisableStatus:false}\r\n        case ACTIONS_TYPE.CHANGE_START_VALUE:\r\n            return {...state, startValue: action.startValue, setButtonDisableStatus:false}\r\n        case ACTIONS_TYPE.CLICK_SET_BUTTON:\r\n            const objForLocalStorage = {\r\n                maxValue: String(state.maxValue),\r\n                startValue: String(state.startValue),\r\n            }\r\n            localStorage.setItem(\"localStorageValues\", JSON.stringify(objForLocalStorage))\r\n            return {...state, currentValue: state.startValue, setButtonDisableStatus:true, displayStatusForOneDisplay:!state.displayStatusForOneDisplay}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const increaseByOneAC = ():IncreaseByOneActionType => ({type: ACTIONS_TYPE.INCREASE_BY_ONE})\r\nexport const resetCurrentValueAC = ():ResetCurrentValueActionType => ({type: ACTIONS_TYPE.RESET_CURRENT_VALUE})\r\nexport const changeMaxValueAC = (maxValue:number):changeMaxValueActionType => ({type: ACTIONS_TYPE.CHANGE_MAX_VALUE, maxValue})\r\nexport const changeStartValueAC = (startValue:number):changeStartValueActionType => ({type: ACTIONS_TYPE.CHANGE_START_VALUE, startValue})\r\nexport const clickSetButtonAC = ():ClickSetButtonActionType => ({type: ACTIONS_TYPE.CLICK_SET_BUTTON})\r\n\r\n","import React from \"react\";\r\nimport s from \"./display.module.css\"\r\nimport Button from \"../Common/button/button\";\r\n\r\nexport type DisplayType = {\r\n    maxValue: number\r\n    startValue: number\r\n    valueCounter: number\r\n    value: number | \"Введите значения и нажмите SET\" | \"Введите корректное значение\"\r\n    OnClickForAddBtn: () => void\r\n    OnClickForResetBtn: () => void\r\n}\r\n\r\nconst Display = (props :DisplayType) => {\r\n    const addButtonStatus = props.valueCounter >= props.maxValue || props.value === \"Введите значения и нажмите SET\"; // дисейбл для кнопки адд\r\n    const resetButtonStatus = props.valueCounter <= props.startValue || props.value === \"Введите значения и нажмите SET\"; // дисейбл для кн ресет\r\n\r\n    let red = \"\";\r\n    if (props.value === props.maxValue) {\r\n        red = s.red\r\n    }\r\n    return (\r\n        <div className={s.AppRight}>\r\n            <div className={s.display}>\r\n                <div className={red}>\r\n                    <div>{props.value}</div>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button name=\"Add\" disabledStatus={addButtonStatus} actionOnClick={props.OnClickForAddBtn}/>\r\n                <Button name=\"Reset\" disabledStatus={resetButtonStatus} actionOnClick={props.OnClickForResetBtn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;\r\n\r\n","import {Grid} from \"@material-ui/core\";\r\nimport DisplayWithInputs, {DisplayWithInputsType} from \"../../displayWithInputs/DisplayWithInputs\";\r\nimport Display, {DisplayType} from \"../../display/display\";\r\nimport React from \"react\";\r\n\r\n\r\ntype TwoDisplaysType = DisplayType & DisplayWithInputsType\r\n\r\nconst TwoDisplays = (props: TwoDisplaysType) => {\r\n    return (\r\n        <Grid style={{height: \"90vh\"}} container={true} direction=\"row\" alignItems=\"center\" justify=\"space-evenly\">\r\n            <Grid item>\r\n                <DisplayWithInputs\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    maxValueError={props.maxValueError}\r\n                    startValueError={props.startValueError}\r\n                    disabledStatusForSetBtn={props.disabledStatusForSetBtn}\r\n                    actionOnClickForSetBtn={props.actionOnClickForSetBtn}\r\n                    onChangeForMaxValue={props.onChangeForMaxValue}\r\n                    onChangeForStartValue={props.onChangeForStartValue}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <Display maxValue={props.maxValue}\r\n                         startValue={props.startValue}\r\n                         valueCounter={props.valueCounter}\r\n                         value={props.value}\r\n                         OnClickForAddBtn={props.OnClickForAddBtn}\r\n                         OnClickForResetBtn={props.OnClickForResetBtn}/>\r\n            </Grid>\r\n        </Grid>)\r\n}\r\n\r\nexport default TwoDisplays","import React from \"react\";\r\nimport {Button, ButtonGroup, Grid} from \"@material-ui/core\";\r\nimport CustomizedInputs from \"../../Common/Input/CustomizedInput\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {DisplayType} from \"../../display/display\";\r\nimport {DisplayWithInputsType} from \"../../displayWithInputs/DisplayWithInputs\";\r\n\r\ntype OneDisplaysType = DisplayType & DisplayWithInputsType & {\r\n    displayStatus:boolean\r\n    onClickSet: ()=>void\r\n}\r\n\r\n\r\nconst OneDisplay = (props: OneDisplaysType) => {\r\n\r\n    const setDisableStatus = props.disabledStatusForSetBtn || props.maxValue===props.startValue || Number.isNaN(props.startValue) || Number.isNaN(props.maxValue)\r\n    const addButtonStatus = props.valueCounter >= props.maxValue || props.displayStatus; // дисейбл для кнопки адд\r\n    const resetButtonStatus = props.valueCounter <= props.startValue || props.displayStatus; // дисейбл для кн ресет\r\n\r\n    const useStyles = makeStyles({\r\n        main: {\r\n            minHeight: \"90vh\",\r\n        },\r\n        forContainer: {\r\n            border: \"3px #0592cd solid\",\r\n            borderRadius: 20,\r\n        },\r\n        forInputs: {\r\n            background: 'linear-gradient(90deg, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)',\r\n            borderRadius: 20,\r\n            border: '3px #0592cd solid',\r\n            color: 'white',\r\n            marginTop: 20,\r\n        },\r\n        forDisplay: {\r\n            fontSize: 40,\r\n            border: '3px #0592cd solid',\r\n            borderRadius: 20,\r\n            width: \"42.5%\",\r\n            height: \"155px\",\r\n            marginTop: 20,\r\n            background: 'linear-gradient(90deg, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)',\r\n            color: (props.valueCounter === props.maxValue) ? \"#770000\" : \"black\"\r\n        },\r\n        forButton: {\r\n            margin: 20,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid classes={{root: classes.main,}} container>\r\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                <Grid classes={{root: classes.forContainer,}} item xs={12} sm={5}>\r\n                    <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n                        { props.displayStatus\r\n                            ? <Grid classes={{root: classes.forInputs,}} item xs={11} sm={8}>\r\n                             <div><Grid item><CustomizedInputs errorStatus={props.maxValueError}\r\n                                                                    onChange={props.onChangeForMaxValue}\r\n                                                                    value={props.maxValue}\r\n                                                                    textValue=\"Max value:\"/></Grid>\r\n                                    <Grid item><CustomizedInputs errorStatus={props.startValueError}\r\n                                                                 onChange={props.onChangeForStartValue}\r\n                                                                 value={props.startValue}\r\n                                                                 textValue=\"Start value:\"/> </Grid></div>\r\n                                </Grid>\r\n                            : <Grid classes={{root: classes.forDisplay,}} container direction=\"column\" justify=\"center\" alignItems=\"center\" >\r\n                                {props.valueCounter}\r\n                        </Grid>}\r\n                        <Grid item classes={{root: classes.forButton,}}>\r\n                            <ButtonGroup variant=\"contained\" color=\"primary\"\r\n                                         aria-label=\"contained primary button group\">\r\n                                <Button disabled={setDisableStatus}\r\n                                        onClick={props.onClickSet}>Set</Button>\r\n                                <Button disabled={addButtonStatus} onClick={props.OnClickForAddBtn}>Add</Button>\r\n                                <Button disabled={resetButtonStatus} onClick={props.OnClickForResetBtn}>Reset</Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default OneDisplay","const initialStateforValue = (keyValue: string, defaultValue: number) => {\r\n    const fromLocStor = JSON.parse(localStorage.getItem(\"localStorageValues\") || \"{}\")\r\n    if (fromLocStor[keyValue]) {\r\n        return Number.parseInt(fromLocStor[keyValue])\r\n    } else {\r\n        return defaultValue\r\n    }\r\n}; // принимает строку с названием ключа объекта и возвращает либо значение из локалСторедж, или если его нет то 0/\r\n\r\nexport default initialStateforValue","import React from 'react';\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nimport SimpleMenu from \"./Components/Common/Menu/menu\";\r\nimport './App.css';\r\nimport Error404 from \"./Components/Pages/Error404\";\r\nimport TwoDisplays from \"./Components/Pages/TwoDisplays/TwoDisplays\";\r\nimport OneDisplay from \"./Components/Pages/OneDisplay/OneDisplay\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/Store\";\r\nimport {\r\n    changeMaxValueAC,\r\n    changeStartValueAC, clickSetButtonAC,\r\n    increaseByOneAC,\r\n    InitialStateType,\r\n    resetCurrentValueAC\r\n} from \"./state/Counter-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const values = useSelector<AppRootStateType, InitialStateType> (state => state.values)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const maxValueError = (values.maxValue <= values.startValue) || (values.maxValue < 0) // условие для ошибки для поля с макс значением\r\n    const startValueError = (values.maxValue <= values.startValue) || (values.startValue < 0) // условие для ошибки для поля со стартовым значением\r\n    const setButtonDisableStatus = (values.maxValue < values.startValue) || (values.maxValue < 0) || (values.startValue < 0) || values.maxValue === values.startValue// условия при которых кнопка сет должна гаснуть, если какое то сработает то возвращают false, вставляется в пропсы кнопки сет и перерисовывает при каждом изменении инпутов\r\n    const addOneValueCounter = () => {\r\n        dispatch(increaseByOneAC())\r\n    }; // обработчик кнопки адд\r\n    const resetValueCounter = () => {\r\n        dispatch(resetCurrentValueAC())\r\n    }; // обработчик ресета\r\n    const onChangeForMaxValue = (i: number) => {\r\n        dispatch(changeMaxValueAC(i))\r\n    }; //обработчик изменения макс инпута\r\n    const onChangeForStartValue = (i: number) => {\r\n        dispatch(changeStartValueAC(i))\r\n    }; // обработчик изменения старт инпута\r\n    const onClickSetButtonHandler = () => {\r\n        dispatch(clickSetButtonAC())\r\n    } //обработчик нажатия на SET\r\n\r\n    const displayValue = (valueCounter: number) => {\r\n        if (!values.setButtonDisableStatus) {\r\n            return \"Введите значения и нажмите SET\"\r\n        }\r\n        if (isNaN(valueCounter)) {\r\n            return \"Введите корректное значение\"\r\n        }\r\n        if (maxValueError || startValueError) {\r\n            return \"Введите корректное значение\"\r\n        }\r\n        return valueCounter\r\n    } // фция возвращает или значение счетчика или текст ошибки\r\n    // в пропс кнопки сета передаю отдельно два условия для дизейбла: setButtonDisableStatus реагирует на изменения инпутов и блокирует кнопку при запрещенных условиях, разблокирует если запрещенные условия выполняются, а buttonSetDisableStatus берется из юсстейта и блокирует кнопку при первом нажатии, а разблокирует при изменении инпутов\r\n    // надо их как то объединить\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <SimpleMenu/>\r\n                        <Typography variant=\"h6\">\r\n                            Counter\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Switch>\r\n                    <Route path={\"/\"} exact render={() => <Redirect to={\"/TwoDisplays\"}/>}/>\r\n                    <Route path={\"/TwoDisplays\"} render={() => <TwoDisplays\r\n                        startValue={values.startValue}\r\n                        maxValue={values.maxValue}\r\n                        valueCounter={values.currentValue}\r\n                        value={displayValue(values.currentValue)}\r\n                        maxValueError={maxValueError}\r\n                        startValueError={startValueError}\r\n                        disabledStatusForSetBtn={setButtonDisableStatus || values.setButtonDisableStatus}\r\n                        actionOnClickForSetBtn={onClickSetButtonHandler}\r\n                        onChangeForMaxValue={onChangeForMaxValue}\r\n                        onChangeForStartValue={onChangeForStartValue}\r\n                        OnClickForAddBtn={addOneValueCounter}\r\n                        OnClickForResetBtn={resetValueCounter}/>}/>\r\n                    <Route path={\"/OneDisplay\"} render={() => <OneDisplay\r\n                        startValue={values.startValue}\r\n                        maxValue={values.maxValue}\r\n                        valueCounter={values.currentValue}\r\n                        value={displayValue(values.currentValue)}\r\n                        displayStatus={values.displayStatusForOneDisplay}\r\n                        maxValueError={maxValueError}\r\n                        startValueError={startValueError}\r\n                        disabledStatusForSetBtn={setButtonDisableStatus}\r\n                        onClickSet={onClickSetButtonHandler}\r\n                        actionOnClickForSetBtn={onClickSetButtonHandler}\r\n                        onChangeForMaxValue={onChangeForMaxValue}\r\n                        onChangeForStartValue={onChangeForStartValue}\r\n                        OnClickForAddBtn={addOneValueCounter}\r\n                        OnClickForResetBtn={resetValueCounter}/>}/>\r\n                    <Route render={() => <Error404/>}/>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./Counter-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    values: counterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/Store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}